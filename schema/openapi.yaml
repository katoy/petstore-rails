openapi: 3.0.0
info:
  license:
    name: MIT
  title: Swagger Petstore
  description: ペットストアー
  version: 1.0.0
  contact:
    name: API support
    url: http://www.example.com/support
    email: support@example.com
servers:
- url: http://petstore.swagger.io/v1
tags:
  - name: pets
    description: ペット
  - name: Users
    description: ユーザー
paths:
  /pets:
    get:
      description: ペットの一覧を得る
      operationId: listPets
      parameters:
      - description: How many items to return at one time (max 100)
        explode: true
        in: query
        name: limit
        required: false
        schema:
          format: int32
          type: integer
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Pets'
          description: A paged array of pets
          headers:
            x-next:
              description: A link to the next page of responses
              explode: false
              schema:
                type: string
              style: simple
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: unexpected error
      summary: ペットの一覧
      tags:
      - pets
    post:
      description: ペットを登録する
      operationId: createPets
      responses:
        "201":
          description: Created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PetResponse"
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: unexpected error
      summary: ペットの登録
      tags:
      - pets
  /pets/{petId}:
    get:
      description: 指定されたペットの詳細情報を得る
      operationId: showPetById
      parameters:
      - description: The id of the pet to retrieve
        explode: false
        in: path
        name: petId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Pet'
          description: Expected response to a valid request
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: unexpected error
      summary: 指定されたペットの詳細情報
      tags:
      - pets
  /users:
    post:
      description: ユーザー登録する
      operationId: createUser
      tags:
        - Users
      summary: Create a User
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserRequest"
      responses:
        "201":
          description: Created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserResponse"
        "422":
          description: Unprocessable Entity
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserError"
components:
  schemas:
    Pet:
      example:
        name: name
        id: 0
        tag: tag
      properties:
        id:
          format: int64
          type: integer
        name:
          type: string
        tag:
          type: string
      required:
      - id
      - name
      type: object
    Pets:
      items:
        $ref: '#/components/schemas/Pet'
      type: array
    Error:
      properties:
        code:
          format: int32
          type: integer
        message:
          type: string
      required:
      - code
      - message
      type: object
    PetResponse:
      type: object
      required:
        - id
        - name
        - tag
      properties:
        id:
          type: integer
        name:
          type: string
        tag:
          nullable: true
      example:
        id: 1
        name: 三毛猫
        tag:
    UserRequest:
      type: object
      required:
        - username
        - password
        - first_name
        - last_name
        - email
        - phone
      properties:
        username:
          type: string
        password:
          type: string
        first_name:
          type: string
        last_name:
          type: string
        email:
          type: string
        phone:
          type: string
      example:
        username: johndoe
        password: p@ssw0rd
        first_name: John
        last_name: Doe
        email: john.doe@example.com
        phone: "03-1234-5678"
    UserResponse:
      type: object
      required:
        - id
        - username
        - first_name
        - last_name
        - email
        - phone
      properties:
        id:
          type: integer
        username:
          type: string
        first_name:
          type: string
        last_name:
          type: string
        email:
          type: string
        phone:
          type: string
      example:
        id: 1
        username: johndoe
        first_name: John
        last_name: Doe
        email: john.doe@example.com
        phone: "0312345678"
    UserError:
      type: object
      properties:
        username:
          type: array
          items:
            type: string
        password:
          type: array
          items:
            type: string
        first_name:
          type: array
          items:
            type: string
        last_name:
          type: array
          items:
            type: string
        email:
          type: array
          items:
            type: string
        phone:
          type: array
          items:
            type: string
      example:
        username:
          - "can't be blank"
          - "has already been taken"
        password:
          - "can't be blank"
          - "is too short (minimum is 6 characters)"
        first_name:
          - "can't be blank"
        last_name:
          - "can't be blank"
        email:
          - "can't be blank"
          - "has already been taken"
        phone:
          - "is invalid"
          - "can't be blank"


