openapi: 3.0.0
info:
  version: 1.0.0
  title: Swagger Petstore
  license:
    name: MIT
servers:
  - url: http://localhost:3000
    description: localhost
  - url: http://petstore/v1
    description: Production
paths:
  /pets:
    post:
      summary: create
      operationId: create_pet
      tags:
        - Pet
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                tag:
                  type: string
            example:
              name: 芝犬
              tag: 犬
      responses:
        '201':
          description: is expected to eq {"id"=>1, "name"=>"三毛猫", "tag"=>nil}
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: integer
                  name:
                    type: string
                  tag:
                    type: string
                    nullable: true
              example:
                id: 1
                name: 三毛猫
                tag: null
        '422':
          description: does not create a pet
          content:
            application/json:
              schema:
                type: object
                properties:
                  name:
                    type: array
                    items:
                      type: string
              example:
                name:
                  - has already been taken
    get:
      summary: index
      operationId: index_pets
      tags:
        - Pet
      responses:
        '200':
          description: >-
            is expected to eq [{"id"=>1, "name"=>"土佐犬", "tag"=>"Sunanda Devi"},
            {"id"=>2, "name"=>"ペルシャ猫", "tag"=>"Nuptse"}]
          content:
            application/json:
              schema:
                type: array
                items:
                  nullable: true
                  type: object
                  properties:
                    id:
                      type: integer
                    name:
                      type: string
                    tag:
                      type: string
              example:
                - id: 1
                  name: 土佐犬
                  tag: Sunanda Devi
                - id: 2
                  name: ペルシャ猫
                  tag: Nuptse
  /pets/{id}:
    get:
      summary: show
      operationId: show_pet
      tags:
        - Pet
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
          example: 2
      responses:
        '200':
          description: is expected to eq {"id"=>2, "name"=>"ペルシャ猫", "tag"=>"Dhaulagiri IV"}
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: integer
                  name:
                    type: string
                  tag:
                    type: string
              example:
                id: 2
                name: ペルシャ猫
                tag: Dhaulagiri IV
        '404':
          description: is expected to eq {}
          content:
            application/json:
              schema:
                type: object
                properties: {}
              example: {}
  /users:
    post:
      summary: create
      operationId: create_user
      tags:
        - User
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                password:
                  type: string
                first_name:
                  type: string
                last_name:
                  type: string
                email:
                  type: string
                phone:
                  type: string
            example:
              username: johndoe
              password: ''
              first_name: ''
              last_name: ''
              email: john.doe@example.com
              phone: ''
      responses:
        '201':
          description: creates a user
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: integer
                  username:
                    type: string
                  first_name:
                    type: string
                  last_name:
                    type: string
                  email:
                    type: string
                  phone:
                    type: string
              example:
                id: 1
                username: johndoe
                first_name: John
                last_name: Doe
                email: john.doe@example.com
                phone: '0312345678'
        '422':
          description: does not create a user
          content:
            application/json:
              schema:
                type: object
                properties:
                  password:
                    type: array
                    items:
                      type: string
                  username:
                    type: array
                    items:
                      type: string
                  first_name:
                    type: array
                    items:
                      type: string
                  last_name:
                    type: array
                    items:
                      type: string
                  email:
                    type: array
                    items:
                      type: string
                  phone:
                    type: array
                    items:
                      type: string
              example:
                password:
                  - can't be blank
                  - is too short (minimum is 6 characters)
                username:
                  - has already been taken
                first_name:
                  - can't be blank
                last_name:
                  - can't be blank
                email:
                  - has already been taken
                phone:
                  - is invalid
                  - can't be blank
components:
  schemas:
    Pet:
      type: object
      required:
        - id
        - name
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
        tag:
          type: string
    Pets:
      type: array
      items:
        $ref: '#/components/schemas/Pet'
    Error:
      type: object
      required:
        - code
        - message
      properties:
        code:
          type: integer
          format: int32
        message:
          type: string
